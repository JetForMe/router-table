O<auto_tool_change> sub

(print,Auto Tool Change)
(print, tool in spindle #<tool_in_spindle>)
(print, selected_tool #<selected_tool>)
(print, current_pocket #<current_pocket>)
(print, selected_pocket #<selected_pocket>)

O150 if [#<tool_in_spindle> EQ #<selected_tool>]
	(print, Selected tool already in spindle, continuing)
	O<auto_tool_change> return [1]
O150 endif

;	For some reason, we're not getting reliable
;	pocket numbers from LinuxCNC. So for now,
;	use the tool #.

#<unloadToPocket> = #<tool_in_spindle>
#<loadFromPocket> = #<selected_tool>

;	If there's a tool in the spindle, put it away first

O110 if [#<tool_in_spindle> GT 0.0]													;	If there's a tool, return an error
	(print, Tool #<tool_in_spindle> in spindle, unloading to #<unloadToPocket>)
	O<ut> call [#<unloadToPocket>]
	O130 if [#<_value> NE 0.0]
		; TODO: let ut.ngc tell us we were empty and proceed?
		(print, Unable to unload tool #<tool_in_spindle> to pocket #<unloadToPocket>)
		(abort, Unable to unload tool #<tool_in_spindle> to pocket #<unloadToPocket>)
		O<auto_tool_change> return [0]
	O130 endif
O110 endif

;	If the desired tool is tool 0 (or -1), we're unloading the spindle,
;	so set to "no tool" and bailâ€¦

O140 if [#<selected_tool> LE 0.0]
	M61 Q0
	(print, Spindle unloaded, no new tool selected)
	O<auto_tool_change> return [1]
O140 endif

;	Spindle should be empty, load new tool

O<lt> call [#<loadFromPocket>]
O120 if [#<_value> NE 0.0]
	(print, Unable to load tool #<selected_tool> from pocket #<selected_pocket>)
	(abort, Unable to load tool #<selected_tool> from pocket #<selected_pocket>)
	O<auto_tool_change> return [0]
O120 endif

O<auto_tool_change> endsub [1]
m2
