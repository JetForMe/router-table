# Place any HAL commands in this file that you want to run before the GUI.
# This file will not be written over by the configuration tool.

#
#	RS-485 Control of VFD
#

# loadusr -Wn vfdb_vfd

#
#	Contour ShuttleXpress
#

loadusr -W shuttle

#loadrt milljogtranslator names=milljogtranslator
#addf milljogtranslator servo-thread

net select-axis-x		halui.joint.0.select									<=	shuttlexpress.0.button-0
net select-axis-y		halui.joint.1.select									<=	shuttlexpress.0.button-1
net select-axis-z		halui.joint.3.select									<=	shuttlexpress.0.button-2
net sxp.continuous																<=	shuttlexpress.0.spring-wheel-s32

loadrt comp names=compJog
addf compJog servo-thread

setp compJog.in0	0
#net sxp.continuous			=>	compJog.in1
net jog-not					<=	compJog.out

loadrt not names=notJog,notEstop
addf notEstop servo-thread
addf notJog servo-thread
net jog-not					=>	notJog.in
net jog						<=	notJog.out

#halui.0.jog

# System Pneumatic Pressure
#
# We don't have a pressure-ok sensor yet, so
# just assume it’s good…
#
# Wow, this clusterfuck is because there doesn't seem to be
# a way to set a net to a constant value.

loadrt constant count=2
addf constant.0 servo-thread
addf constant.1 servo-thread

loadrt lut5 count=3 #names=spindleInhibit
addf lut5.0 servo-thread
addf lut5.1 servo-thread
addf lut5.2 servo-thread


loadrt timedelay names=spindleFanDelay
addf spindleFanDelay servo-thread

setp constant.0.value 0
setp constant.1.value 1

loadrt near count=2
addf near.0 servo-thread
addf near.1 servo-thread

net zero <= constant.0.out
net one <= constant.1.out

net zero => near.0.in1
net one => near.0.in2

net one => near.1.in1
net one => near.1.in2

net pressure-ok-in <= near.1.out

#
#	Spindle Pins
#

net spindle-button-in-raw			<= hm2_7i76e.0.7i76.0.0.input-07
net spindle-temp-ok-in				<= hm2_7i76e.0.7i76.0.0.input-04
net spindle-collet-open-in-raw		<= hm2_7i76e.0.7i76.0.0.input-05
net spindle-collet-locked-in-raw	<= hm2_7i76e.0.7i76.0.0.input-06
net spindle-zero-speed-in			<= hm2_7i76e.0.7i76.0.0.input-23
net spindle-at-speed-in				<= hm2_7i76e.0.7i76.0.0.input-22

net spindle-open-collet-out			=> hm2_7i76e.0.7i76.0.0.output-06
net spindle-purge-air-out			=> hm2_7i76e.0.7i76.0.0.output-07

alias pin	hm2_7i76e.0.7i76.0.0.spinena			spindle-enable-out
alias pin	hm2_7i76e.0.7i76.0.0.output-05			spindle-fan-on-out

#
#	Servo Pins
#

#	Enable Pins

alias pin hm2_7i76e.0.7i76.0.0.output-08			servo-enable-x
alias pin hm2_7i76e.0.7i76.0.0.output-09			servo-enable-y1
alias pin hm2_7i76e.0.7i76.0.0.output-10			servo-enable-y2
alias pin hm2_7i76e.0.7i76.0.0.output-11			servo-enable-z

#	Servo fault (HLFB, high-level feedback, high when "position good")

alias pin hm2_7i76e.0.7i76.0.0.input-28-not			servo-fault-in-x
alias pin hm2_7i76e.0.7i76.0.0.input-29-not			servo-fault-in-y1
alias pin hm2_7i76e.0.7i76.0.0.input-30-not			servo-fault-in-y2
alias pin hm2_7i76e.0.7i76.0.0.input-31-not			servo-fault-in-z 

# Debouncers
#
#	Group 1: Debounce the spindle button and tool holder sensors

loadrt debounce cfg=3
addf debounce.0 servo-thread

# Debounce spindle-button-in-raw, spindle-collet-open-in-raw, spindle-collet-locked-in-raw

setp debounce.0.delay 4

net spindle-button-in-raw							=> debounce.0.0.in
net spindle-button-in								<= debounce.0.0.out

net spindle-collet-open-in-raw						=> debounce.0.1.in
net spindle-collet-open-in							<= debounce.0.1.out

net spindle-collet-locked-in-raw					=> debounce.0.2.in
net spindle-collet-locked-in						<= debounce.0.2.out

# Purge Air
#
# spindle-purge-air-out = program-purge-air || !spindle-zero-speed-in

setp lut5.2.function 0xB

net program-purge-air => lut5.2.in-0
net spindle-zero-speed-in => lut5.2.in-1

net spindle-purge-air-out => lut5.2.out



#
# Spindle
#

loadrt scale count=1
addf scale.0 servo-thread
setp scale.0.gain 0.00416667
net spindle-speed-scale spindle.0.speed-out-abs		=> scale.0.in
net spindle-speed-DAC scale.0.out					=> hm2_7i76e.0.7i76.0.0.spinout

net spindle-fwd spindle.0.reverse					=> hm2_7i76e.0.7i76.0.0.spindir

# net spindle-button								<= hm2_7i76e.0.7i76.0.0.input-07

## Axis fault connections

net axis-fault-x	servo-fault-in-x				=> joint.0.amp-fault-in
net axis-fault-y1	servo-fault-in-y1				=> joint.1.amp-fault-in
net axis-fault-y2	servo-fault-in-y2				=> joint.2.amp-fault-in
net axis-fault-z	servo-fault-in-z				=> joint.3.amp-fault-in

## Spindle Speed
#
# This prevents the motion component from executing the first feed move
# after each spindle start or speed change, but does not prevent rapids.
# See http://linuxcnc.org/docs/devel/html/man/man9/motion.9.html#SPINDLE%20PINS
# for more details.
#
# We use the VFD’s at-operational-speed signal, which just means the
# VFD has ramped up its output frequency to the commanded speed. It does
# NOT mean the spindle is actually at that speed.

net spindle-at-speed-in => spindle.0.at-speed

# Spindle enable/inhibit

net spindle-enable spindle.0.on						=> spindle-enable-out

#	Spindle fan (on with spindle, off after delay)

setp spindleFanDelay.off-delay						60.0						#	Run for at least a minute
net spindle-enable									=> spindleFanDelay.in
net spindle-fan-delay	spindleFanDelay.out			=> spindle-fan-on-out

# spindle-inhibit = !spindle-temp-ok-in || !spindle-collet-locked-in || !pressure-ok-in
#
# lut5.py -n3 '(not i0) | (not i1) | (not i2)'
# expression = (not i0) | (not i1) | (not i2)
#in: i4 i3 i2 i1 i0 out weight
# 0:  0  0  0  0  0  1   0x1
# 1:  0  0  0  0  1  1   0x2
# 2:  0  0  0  1  0  1   0x4
# 3:  0  0  0  1  1  1   0x8
# 4:  0  0  1  0  0  1   0x10
# 5:  0  0  1  0  1  1   0x20
# 6:  0  0  1  1  0  1   0x40
# 7:  0  0  1  1  1  0
# setp lut5.N.function 0x7f
#
#	This doesn't work. I really need m3/m4 to be *prevented* if certain conditions aren't met.

setp lut5.0.function 0x7f
net spindle-temp-ok-in => lut5.0.in-0
net spindle-collet-locked-in => lut5.0.in-1
net pressure-ok-in => lut5.0.in-2

net spindle-off spindle.0.inhibit <= lut5.0.out

# Tool-release rules
#
# spindle-open-collet-out = spindle-zero-speed-in
#							&& (program-idle || tool-prepare)
#							&& pressure-ok-in
#							&& (program-open-collet || spindle-button-press-in)
#
# spindle-open-collet-out = spindle-zero-speed-in
#							&& (program-idle || tool-prepare)
#							&& (program-open-collet || spindle-button-press-in)
# lut5.py -n5 'i0 & (i1 | i2) & (i3 | i4)'
#							
#
#
#	Shit, this doesn't work. If you command m64 p2 while the spindle is running, then stop it, the tool is released.
#
#	Something else wrong: if the spindle is on with no tool locked, pressing the button or issuing m64 p2 causes purge air,
#	and it cycles that on and off, along with the collet (although it never manages to open fully).

# setp lut5.1.function 0x80808000
setp lut5.1.function 0xa8a8a800

net spindle-zero-speed-in							=> lut5.1.in-0
net program-idle									=> lut5.1.in-1
#net pressure-ok-in									=> lut5.1.in-2
net tool-change										=> lut5.1.in-2
net program-open-collet								=> lut5.1.in-3
net spindle-button-in								=> lut5.1.in-4

net spindle-open-collet-out							<= lut5.1.out

# Ladder

# loadrt classicladder_rt
# addf classicladder.0.refresh servo-thread
# 
# loadusr classicladder ladder.clp
# 
# 
# net temp-ok										=> classicladder.0.in-00
# net collet-open									=> classicladder.0.in-01
# net collet-locked									=> classicladder.0.in-02
# net spindle-button								=> classicladder.0.in-03

# The open-collet command signal

# net digital-out-open-collet classicladder.0.out-00	=> hm2_7i76e.0.7i76.0.0.output-06



#
# Notes
#

